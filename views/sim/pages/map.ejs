<style type="text/css">
    .map-container {
        width: 100%;
        height: 70vh
    }
</style>

<div class="card">
    <div class="card-header">
        Map
    </div>
    <div class="card-body">
        <div id="map" class="map-container"></div>
        <div id="info" style="display: none;"></div>
        <div id="map1-info" style="display: none;"></div>
    </div>
</div>
<script>
    map = new maptalks.Map('map', {
        center: [73.5107, 4.17526],
        zoom: 16,
        pitch: 0,
        centerCross: true,
        attribution: true,
        zoomControl: true, // add zoom control
        scaleControl: true, // add scale control
        overviewControl: false, // add overview control
        baseLayer: new maptalks.TileLayer('base', {
            urlTemplate: 'https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png',
            subdomains: ["a", "b", "c", "d"],
            attribution: '&copy; <a href="http://osm.org">OpenStreetMap</a> contributors, &copy; <a href="https://carto.com/">CARTO</a>'
        })
    });
    getMap1Status()
    map.on('click', function (param) {
        var infoDom = document.getElementById('info');
        infoDom.innerHTML = '<div>' + new Date().toLocaleTimeString() +
            ': click map on ' + param.coordinate.toFixed(5).toArray().join() + '</div>';
    });




    var layer = new maptalks.VectorLayer('Map Objects', {
        enableAltitude: true,
        // draw altitude
        drawAltitude: {
            lineWidth: 1,
            lineColor: '#000',
            polygonFill: '#1bbc9b',
            polygonOpacity: 0.3,
        }
    }).addTo(map);





    var drawTool = new maptalks.DrawTool({
        mode: 'Point'
    }).addTo(map).disable();

    drawTool.on('drawend', function (param) {
        console.log(param.geometry);
        param.geometry['properties'] = []
        param.geometry['properties']['suqid'] = 'object_' + mapObjectCnt;
        param.geometry['properties']['jsonType'] = param.geometry._jsonType;
        param.geometry['properties']['objectType'] = param.geometry.type;
        geoItems['object_' + mapObjectCnt] = param.geometry;
        drawTool.disable();



        layer.addGeometry(param.geometry);

        mapObjectCnt++;

    });
    //, 'FreeHandLineString', 'FreeHandPolygon'
    var items = ['LineString', 'Polygon', 'Circle', 'Ellipse', 'Rectangle', 'ArcCurve', 'QuadBezierCurve',
        'CubicBezierCurve'
    ].map(function (value) {
        return {
            item: value,
            click: function () {
                drawTool.setMode(value).enable();
            }
        };
    });

    map.on('click', function (e) {

        //reset colors
        layer.forEach(function (g) {



            g.endEdit();
        });
        //identify
        map.identify({
                'coordinate': e.coordinate,
                'layers': [layer]
            },
            function (geos) {
                if (geos.length === 0) {
                    return;
                }
                geos.forEach(function (g) {



                    if (g.properties.objectType == 'Point') {
                        rd.readMarkerProperties(g)
                        //rd.readObjectProperties(g)
                    } else {
                        rd.readObjectProperties(g)
                        g.startEdit();
                    }


                    document.getElementById('geojsonContent').innerHTML = JSON.stringify(g
                        .toGeoJSON());




                });

            }
        );
    });

    var toolbar = new maptalks.control.Toolbar({
        items: [{
                item: 'Shape',
                children: items
            },
            {
                item: 'End Draw',
                click: function () {
                    drawTool.disable();
                }
            },
            {
                item: 'Clear',
                click: function () {
                    layer.clear();
                    iconLayer.clear();
                    $('#map-obj-prop').html('')
                }
            }
        ]
    }).addTo(map);



    map.on('moving moveend', function (e) {
        getMap1Status()
    });

    map.on('zooming zoomend', function (e) {
        getMap1Status()
    });

    map.on('pitch', function (e) {
        getMap1Status()
    });

    map.on('rotate', function (e) {
        getMap1Status()
    });




    function getMap1Status() {


        var extent = map.getExtent(),
            ex = [
                '{',
                'xmin:' + extent.xmin.toFixed(5),
                ', ymin:' + extent.ymin.toFixed(5),
                ', xmax:' + extent.xmax.toFixed(5),
                ', ymax:' + extent.xmax.toFixed(5),
                '}'
            ].join('');
        map
        var center = map.getCenter();
        map1_center = [center.x.toFixed(5), center.y.toFixed(5)].join();
        map1_extend = ex;
        map1_zoom = map.getZoom();
        var mapStatus = [
            'Name : <b>map1</b>',
            'Center : [' + map1_center + ']',
            'Extent : ' + ex,
            'Size : ' + map.getSize().toArray().join(),
            'Zoom : ' + map1_zoom,
            'MinZoom : ' + map.getMinZoom(),
            'MaxZoom : ' + map.getMaxZoom(),
            'Pitch : ' + map.getPitch().toFixed(5),
            'Bearing : ' + map.getBearing().toFixed(5),
            'Projection : ' + map.getProjection().code
        ];
        // var mapJSON = map1.toJSON();
        //document.getElementById('map1-json').innerHTML = JSON.stringify(mapJSON);
        document.getElementById('map1-info').innerHTML = '<div>' + mapStatus.join('<br>') + '</div>';

    }











    var rd = {
        drawGeoJson: function () {

            const obj = $('#geojsonContent').val();
            const objJSON = JSON.parse(obj);
            geoItems['geoJsonFeature_' + mapObjectCnt] = maptalks.GeoJSON.toGeometry(obj).addTo(map.getLayer(
                'Map Objects'));
            mapObjectCnt++;
        },
        drawGeoJsonCollection: function () {

            const obj = $('#geojsonCollectionContent').val();
            const objJSON = JSON.parse(obj);
            objJSON.features.forEach(rd.drawGeoJsonCollectionFeatures)

        },
        drawGeoJsonCollectionFeatures: function (item, index, arr) {

            geoItems['geoJsonCollection_' + mapObjectCnt] = maptalks.GeoJSON.toGeometry(item).addTo(map
                .getLayer('Map Objects'));
            mapObjectCnt++;
        },
        extractGeoJsonCollection: function () {

            var featureCollection = {
                type: 'FeatureCollection',
                features: []
            };

            var jProcess = new Promise((resolve, reject) => {
                let count = 0;
                Object.keys(geoItems).forEach(key => {
                    const x = JSON.parse(JSON.stringify(geoItems[key]));
                    featureCollection.features.push(x.feature);
                    count++;
                    if (count === Object.keys(geoItems).length) resolve();
                });
            });

            jProcess.then(() => {
                console.log(featureCollection);
                $('#geojsonCollectionContent').val(JSON.stringify(featureCollection));
            });

        },
        calculateAltitudeInMeters: function (floors) {
            const FEET_PER_FLOOR = 10;
            const METERS_PER_FOOT = 0.3048;
            const altitudeInFeet = floors * FEET_PER_FLOOR;
            const altitudeInMeters = altitudeInFeet * METERS_PER_FOOT;
            return altitudeInMeters;
        },
        getFormValues: function (formId) {

            const form = document.getElementById(formId);
            const inputs = form.querySelectorAll('input, select, textarea');
            const values = {};

            inputs.forEach(input => {

                if (input.type === 'checkbox') {
                    values[input.name] = input.checked;
                } else {
                    values[input.name] = input.value;
                }
                console.log(values[input.name])
            });


            switch (formId) {
                case 'gen-marker':
                    rd.genMarkerProperties(values)
                    break;
                case 'gen-objects':
                    rd.genObjectProperties(values)
                    break;
            }

        },
        readObjectProperties(values) {


            $('#objectId').val(values.properties.suqid)


        },
        readMarkerProperties(values) {


            $('#marker-id').val(values.properties.suqid)
            $('#marker-color').val(values.properties.marker_color)
            $('#marker-type').val(values.properties.marker_type)


        },
        genObjectProperties(values) {
            console.log(geoItems[values['objectId']])
            var floor = rd.calculateAltitudeInMeters(values['objectFloor'])

            geoItems[values['objectId']].properties.altitude = floor;

            if (geoItems[values['objectId']].type != 'Point') {
                geoItems[values['objectId']].updateSymbol({
                    userEdit: true,
                    'polygonFill': values['objectColor'],
                    'lineColor': values['objectColor'],
                    'polygonOpacity': 0.6
                });



                geoItems[values['objectId']].setInfoWindow({
                    'title': values['objectTitle'],
                    'content': values['objectContent']

                    // 'autoPan': true,
                    // 'width': 300,
                    // 'minHeight': 120,
                    // 'custom': false,
                    //'autoOpenOn' : 'click',  //set to null if not to open when clicking on marker
                    //'autoCloseOn' : 'click'
                });
            }

        },
        genMarkerProperties(values) {
            var floor = rd.calculateAltitudeInMeters(values['marker-floor'])

            var markerProperties = {




                'name': 'Marker- ' + mapObjectCnt,
                'suqid': 'marker_' + mapObjectCnt,
                'objectType': 'Point',
                'jsonType': values['marker-type'],
                'marker_role': values['marker-role'],
                'marker_title': values['marker-title'],
                'marker_content': values['marker-content'],
                'marker_color': values['marker-color'],
                'marker_floor': values['marker-floor'],
                'altitude': floor
            }
            rd.genMarker(markerProperties);
        },


        genMarker(p) {
            console.log(p)
            var c = map.getCenter();

            if (typeof geoItems['marker_' + mapObjectCnt] == 'undefined') {


                geoItems['marker_' + mapObjectCnt] = new maptalks.Marker(
                    c, {
                        'draggable': true,
                        properties: p,
                        symbol: [{
                            'textVerticalAlignment': 'top', // top, middle, bottom(default)
                            'textDy': 24,
                            'textName': p.marker_role,
                            'textSize': '14',
                            'textFill': '#7C7B7B',
                            'markerType': p.jsonType,
                            'markerFill': p.marker_color,
                            'markerFillOpacity': 0.4,
                            'markerLineColor': p.marker_color,
                            'markerLineWidth': 1,
                            'markerLineOpacity': 1,
                            'markerWidth': 40,
                            'markerHeight': 40,
                            'markerDx': 0,
                            'markerDy': 0,
                            'markerOpacity': 0.8
                        }],

                    });

                geoItems['marker_' + mapObjectCnt].setInfoWindow({
                    'title': p.marker_title,
                    'content': p.marker_content

                    // 'autoPan': true,
                    // 'width': 300,
                    // 'minHeight': 120,
                    // 'custom': false,
                    //'autoOpenOn' : 'click',  //set to null if not to open when clicking on marker
                    //'autoCloseOn' : 'click'
                });

                map.getLayer('Map Objects').addGeometry(geoItems['marker_' + mapObjectCnt]);
                mapObjectCnt++;
            } else {


            }






        }
    }
</script>