<style type="text/css">
    .map-container {
        width: 100%;
        height: 70vh
    }
</style>

<div class="card">
    <div class="card-header">
        Map
    </div>
    <div class="card-body">
        <div id="map" class="map-container"></div>
        <div id="info" style="display: none;"></div>
        <div id="map1-info" style="display: none;"></div>
    </div>
</div>
<script>
    

       
    var geoItems = [];
    var geoItemsOptions = [];

      map = new maptalks.Map('map', {
        center: [73.5107, 4.17526],
        zoom: 16,
        pitch: 0,
        attribution: true,
        zoomControl: true, // add zoom control
        scaleControl: true, // add scale control
        overviewControl: false, // add overview control
        baseLayer: new maptalks.TileLayer('base', {
            urlTemplate: 'https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png',
            subdomains: ["a", "b", "c", "d"],
            attribution: '&copy; <a href="http://osm.org">OpenStreetMap</a> contributors, &copy; <a href="https://carto.com/">CARTO</a>'
        })
    });
    getMap1Status()
    map.on('click', function (param) {
        var infoDom = document.getElementById('info');
        infoDom.innerHTML = '<div>' + new Date().toLocaleTimeString() +
            ': click map on ' + param.coordinate.toFixed(5).toArray().join() + '</div>';
    });



    var layer = new maptalks.VectorLayer('vector',{
        enableAltitude : true,
        // draw altitude
        drawAltitude : {
          lineWidth : 1,
          lineColor : '#000'
        }}).addTo(map);

    var iconLayer = new maptalks.VectorLayer('Icons',{
        enableAltitude : true,
        // draw altitude
        drawAltitude : {
          lineWidth : 1,
          lineColor : '#000'
        }}).addTo(map);

    var drawTool = new maptalks.DrawTool({
        mode: 'Point'
    }).addTo(map).disable();

    drawTool.on('drawend', function (param) {
        console.log(param.geometry);
        param.geometry['properties']=[]
        param.geometry['properties']['suqid']=mapObjectCnt;
        geoItems.push(param.geometry);
       
        var options = {
        'title'     : 'Map Custom Object '+mapObjectCnt,
        'content'   : 'Custom text'

        // 'autoPan': true,
        // 'width': 300,
        // 'minHeight': 120,
        // 'custom': false,
        //'autoOpenOn' : 'click',  //set to null if not to open window when clicking on map
        //'autoCloseOn' : 'click'
      };
      drawTool.disable();
      geoItemsOptions.push(options);
      var infoWindow = new maptalks.ui.InfoWindow(options);
      infoWindow.addTo(param.geometry).show();



        
        layer.addGeometry(param.geometry);
       
        mapObjectCnt++;

    });
    //, 'FreeHandLineString', 'FreeHandPolygon'
    var items = ['Point', 'LineString', 'Polygon', 'Circle', 'Ellipse', 'Rectangle','ArcCurve','QuadBezierCurve','CubicBezierCurve'].map(function (value) {
        return {
            item: value,
            click: function () {
                drawTool.setMode(value).enable();
            }
        };
    });

    map.on('click', function (e) {

        //reset colors
        layer.forEach(function (g) {
            selectedMapObject=g;
            console.log(g)
           
            
       
            g.endEdit();
        });
        //identify
        map.identify({
                'coordinate': e.coordinate,
                'layers': [layer]
            },
            function (geos) {
                if (geos.length === 0) {
                    return;
                }
                geos.forEach(function (g) {
                   
                  



                    $('#objectId').val(g.properties.suqid); 
                    $('#objectType').val(g.type + ' / ' + g._jsonType); 

                    g.startEdit();


                });

            }
        );
    });

    var toolbar = new maptalks.control.Toolbar({
        items: [{
                item: 'Shape',
                children: items
            },
            {
                item: 'End Draw',
                click: function () {
                    drawTool.disable();
                }
            },
            {
                item: 'Clear',
                click: function () {
                    layer.clear();
                    iconLayer.clear();
                    $('#map-obj-prop').html('')
                }
            }
        ]
    }).addTo(map);



    map.on('moving moveend', function (e) {
        getMap1Status()
    });

    map.on('zooming zoomend', function (e) {
        getMap1Status()
    });

    map.on('pitch', function (e) {
        getMap1Status()
    });

    map.on('rotate', function (e) {
        getMap1Status()
    });




    function getMap1Status() {


        var extent = map.getExtent(),
            ex = [
                '{',
                'xmin:' + extent.xmin.toFixed(5),
                ', ymin:' + extent.ymin.toFixed(5),
                ', xmax:' + extent.xmax.toFixed(5),
                ', ymax:' + extent.xmax.toFixed(5),
                '}'
            ].join('');
        map
        var center = map.getCenter();
        map1_center = [center.x.toFixed(5), center.y.toFixed(5)].join();
        map1_extend = ex;
        map1_zoom = map.getZoom();
        var mapStatus = [
            'Name : <b>map1</b>',
            'Center : [' + map1_center + ']',
            'Extent : ' + ex,
            'Size : ' + map.getSize().toArray().join(),
            'Zoom : ' + map1_zoom,
            'MinZoom : ' + map.getMinZoom(),
            'MaxZoom : ' + map.getMaxZoom(),
            'Pitch : ' + map.getPitch().toFixed(5),
            'Bearing : ' + map.getBearing().toFixed(5),
            'Projection : ' + map.getProjection().code
        ];
        // var mapJSON = map1.toJSON();
        //document.getElementById('map1-json').innerHTML = JSON.stringify(mapJSON);
        document.getElementById('map1-info').innerHTML = '<div>' + mapStatus.join('<br>') + '</div>';

    }
   


    

    function addIcon(iconname) {

        var center = map.getCenter();


        geoItems[mapObjectCnt-1] = new maptalks.Marker(
            [center.x.toFixed(5), center.y.toFixed(5)], {
                'draggable': true,
                dragShadow : false, // display a shadow during dragging
            
                'properties': {
                    'name': 'Marker- ' + mapObjectCnt,
                    'suqid': mapObjectCnt,
                    'imageName': iconname,
                    altitude :0,
                },
                'symbol': [
                    {
                        
                        'markerDx': 0,
                        'markerDy': 0,
                        'markerOpacity': 0.8
                    },
                    {
                        'markerFile': 'assets/sim-icons/' + iconname,
                        'markerWidth': 29,
                        'markerHeight': 29,
                        'markerDy': -20
                    },
                    {
                        'markerFile': 'assets/css/images/marker.png',
                       
                    },
                    {
                        'textFaceName': 'sans-serif',
                        'textName': '{name}',
                        'textSize': 14,
                        'textDy': 24
                    }
                ]
            }
        ).addTo(iconLayer);

        geoItems[mapObjectCnt-1].on('click', function (e) {
            generateMapMarkerjProp(this)
        });

        mapObjectCnt++;

    }

    function generateMapMarkerjProp(g) {
      

        console.log(g)


     
        console.log( g.properties.suqid)
        $('#objectId').val(g.properties.suqid); 
        $('#objectType').val(g.type); 
   
     
        
  

    }


    $( "#colorCode" ).on( "change", function() {
         var  oldSymbole=   selectedMapObject.getSymbol();

         console.log(oldSymbole)

} );

</script>